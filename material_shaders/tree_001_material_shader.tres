[gd_resource type="Shader" format=3 uid="uid://ci5iq8y07jgbm"]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.2.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,depth_prepass_alpha;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform sampler2D texture_normal : hint_roughness_normal,filter_linear_mipmap,repeat_enable;
uniform float normal_scale : hint_range(-16,16);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform float sway_speed = 1.0;
uniform float sway_strength = 0.05;
uniform float sway_phase_len = 8.0;

uniform sampler2D SCEEN_TEXTURE: hint_screen_texture, filter_linear_mipmap;

global uniform vec3 player_position;
global uniform vec3 camera_position;

varying vec3 WORLD_VERTEX;
varying float MASK_POINT;

uniform sampler2D mask;

uniform float clip_start_offset: hint_range(0.0, 10.0) = 0;

vec3 get_direction(vec3 from, vec3 to) {
    return normalize(to - from);
}

vec3 move_towards(vec3 position, vec3 direction, float velocity) {
    // Normalize the direction to ensure it's a unit vector
    vec3 normalized_direction = normalize(direction);
    
    // Calculate the displacement vector
    vec3 displacement = normalized_direction * velocity;
    
    // Update the position by adding the displacement
    vec3 new_position = position + displacement;
    
    return new_position;
}

float distance_to_line(vec3 point, vec3 line_start, vec3 line_end) {
	vec3 offset_direction = get_direction(line_start, line_end);
	line_start = move_towards(line_start, offset_direction, clip_start_offset);
    vec3 line_dir = line_end - line_start;
    vec3 point_to_start = point - line_start;
    vec3 projection = dot(point_to_start, line_dir) / dot(line_dir, line_dir) * line_dir;
    vec3 closest_point = line_start + projection;
    
    // Clamp the closest point to be within the line segment
    if (dot(line_dir, closest_point - line_start) < 0.0) {
        closest_point = line_start;
    } else if (dot(line_dir, closest_point - line_end) > 0.0) {
        closest_point = line_end;
    }
    
    return length(point - closest_point);
}

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	
	float strength = COLOR.r * sway_strength;
    VERTEX.x += sin(VERTEX.x * sway_phase_len * 1.123 + TIME * sway_speed) * strength;
    VERTEX.y += sin(VERTEX.y * sway_phase_len + TIME * sway_speed * 1.12412) * strength;
    VERTEX.z += sin(VERTEX.z * sway_phase_len * 0.9123 + TIME * sway_speed * 1.3123) * strength;
	
	WORLD_VERTEX = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
	MASK_POINT = distance_to_line(WORLD_VERTEX, player_position, camera_position);
}

uniform float clip_radius: hint_range(0.0, 10.0) = 0.5;

bool is_in_front() {
	// Determine if the fragment is in front of the player
	float distance1 = length(camera_position - WORLD_VERTEX);
	float distance2 = length(camera_position - player_position);
	
	return distance1 < distance2;
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMAL_MAP = texture(texture_normal,base_uv).rgb;
	NORMAL_MAP_DEPTH = normal_scale;
	ALPHA *= albedo.a * albedo_tex.a;
    
    if (MASK_POINT < clip_radius && texture(mask, base_uv).rgb == vec3(1.0)) {
        discard;
    }
}"
